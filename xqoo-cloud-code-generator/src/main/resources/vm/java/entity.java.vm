package ${packageName}.entity;

import com.baomidou.mybatisplus.annotation.*;
import com.baomidou.mybatisplus.extension.activerecord.Model;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import cn.hutool.core.bean.BeanUtil;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import java.util.Map;
import java.util.Objects;

#foreach ($import in $importList)
import ${import};
#end

/**
 * ${tableName}实体类
 *
 * @author ${author}
 * @date ${dateTime}
 */
@ApiModel("${tableComment}实体")
@TableName(value = "${tableName}")
public class ${className}Entity extends Model<${className}Entity> {

    private static final long serialVersionUID = ${serialVersionUid}L;
#foreach($column in $columns)

    @ApiModelProperty("$column.comment")
#if($column.primaryKey && $column.autoIncrement)
    @TableId(value = "$column.columnName", type = IdType.AUTO)
#elseif($column.primaryKey)
    @TableId(value = "$column.columnName")
#end
#if($column.javaFieldName == 'createBy' || $column.javaFieldName == 'createDate')
    @TableField(value = "$column.columnName", fill = FieldFill.INSERT)
#end
#if($column.javaFieldName == 'updateBy' || $column.javaFieldName == 'updateDate')
    @TableField(value = "$column.columnName", fill = FieldFill.UPDATE)
#end
#if($column.javaFieldType == 'Date')
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss" ,timezone = "GMT+8")
#end
    private $column.javaFieldType $column.javaFieldName;
#end
#foreach($column in $columns)

    public void set${column.javaAttrName}($column.javaFieldType $column.javaFieldName) {
        this.$column.javaFieldName = $column.javaFieldName;
    }

    public $column.javaFieldType get${column.javaAttrName}(){
        return this.$column.javaFieldName;
    }
#end

    public Map<String, Object> toMap(){
        return BeanUtil.beanToMap(this);
    }

    /**
     * 将map直接赋值到bean中并返回一个新的bean
     * @param valueMap 需要转换的map
     */
    public ${className}Entity fromMap(Map<String, Object> valueMap) {
        return BeanUtil.mapToBean(valueMap, this.getClass(), false, null);
    }

    @Override
    public String toString(){
        return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE)
#foreach($column in $columns)
            .append("${column.javaFieldName}", get${column.javaAttrName}())
#end
            .toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) { return true };
        if (o == null || getClass() != o.getClass()) { return false };
        ${className}Entity that = (${className}Entity) o;
        return new EqualsBuilder()
#set($ArrLength=$columns.size())
#foreach($column in $columns)
                .append(${column.javaFieldName}, that.${column.javaFieldName})
#end
            .isEquals();
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder(17, 37)
#foreach($column in $columns)
                .append(${column.javaFieldName})
#end
                .toHashCode();
    }
}
